pipeline {
    agent any
    environment {
        ARCHIVE_NAME = 'NetCoreApp.zip'
    }
    stages {
            stage('Preparation') {
                steps {
                    script {
                        to = emailextrecipients([
                            [$class: 'CulpritsRecipientProvider'],
                            [$class: 'DevelopersRecipientProvider'],
                            [$class: 'RequesterRecipientProvider']
                        ])
                    
                        checkout scm
                        sh 'git rev-parse --short HEAD > .git/commit-id'
                        commit_id = readFile('.git/commit-id').trim()
                    }
                }
            }

            stage('Build') {
                steps {
                    script {
                        dir("app/publish") {
                            deleteDir()
                        }
                        bat 'dotnet publish -c Release -o app/publish'
                    }
                }
            }

            stage('SonarQube Analysis') {
                steps {
                    script {
                        def scannerHome = tool 'SonarScanner for MSBuild'
                        withSonarQubeEnv() {
                            bat "dotnet ${scannerHome}\\SonarScanner.MSBuild.dll begin /k:\"NetCoreApp\""
                            bat "dotnet build"
                            bat "dotnet ${scannerHome}\\SonarScanner.MSBuild.dll end"
                        }
                    }
                }
            }

            stage ("Archive") {
                steps {
                    script {
                        archiveArtifacts artifacts: "${ARCHIVE_NAME}"
                    }
                }
            }

            stage('Artifact') {
                steps {
                    script {
                        if (fileExists(ARCHIVE_NAME)) {
                            bat "del ${ARCHIVE_NAME}"
                        }
                        zip zipFile: "${ARCHIVE_NAME}", archive: true, dir: 'app/publish'
                    }
                }
            }

            stage('Publish Artifact') {
                steps {
                    script {
                        server = Artifactory.server 'amitdevops.jfrog.io'

                        def uploadSpec = """{
                            "files": [
                                {
                                "pattern": "${ARCHIVE_NAME}",
                                "target": "netcoreapp-generic-local/${env.BUILD_NUMBER}/"
                                }
                            ]
                        }"""
                        server.upload(uploadSpec)
                    }
                }
            }
    }

    post {
        always {
            script {
                content = '${JELLY_SCRIPT,template="html"}'
            }
        }
        success {
                script {
                    // mark build as failed
                    currentBuild.result = 'Success'
                    // set variables
                    subject = "${env.JOB_NAME} - Build #${env.BUILD_NUMBER} ${currentBuild.result}"

                    // send email
                    if(to != null && !to.isEmpty()) {
                    emailext(body: content, mimeType: 'text/html',
                        replyTo: '$DEFAULT_REPLYTO', subject: subject,
                        to: to, attachLog: true )
                    }
                }
            }

            failure {
                script {
                    // mark build as failed
                    currentBuild.result = 'Failed'
                    // set variables
                    def subject = "${env.JOB_NAME} - Build #${env.BUILD_NUMBER} ${currentBuild.result}"

                    // send email
                    if(to != null && !to.isEmpty()) {
                    emailext(body: content, mimeType: 'text/html',
                        replyTo: '$DEFAULT_REPLYTO', subject: subject,
                        to: to, attachLog: true )
                    }
                }
            }
    }
}
